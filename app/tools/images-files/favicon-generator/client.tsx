"use client"

import { useState } from "react"
import JSZip from "jszip"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"

const SIZES = [16, 32, 48, 64, 128, 180, 192, 256, 512]

export default function FaviconGeneratorClient() {
  const [file, setFile] = useState<File | null>(null)

  async function generate() {
    if (!file) return
    const img = await loadImage(file)
    const zip = new JSZip()

    for (const size of SIZES) {
      const canvas = document.createElement("canvas")
      canvas.width = size
      canvas.height = size
      const ctx = canvas.getContext("2d")!
      ctx.clearRect(0, 0, size, size)
      // Fit cover
      const ratio = Math.max(size / img.naturalWidth, size / img.naturalHeight)
      const w = img.naturalWidth * ratio
      const h = img.naturalHeight * ratio
      const x = (size - w) / 2
      const y = (size - h) / 2
      ctx.drawImage(img, x, y, w, h)

      const blob: Blob = await new Promise((res) => canvas.toBlob((b) => res(b || new Blob()), "image/png"))
      const arrBuf = await blob.arrayBuffer()
      zip.file(`favicon-${size}x${size}.png`, arrBuf)
    }

    // Add simple info file
    zip.file(
      "README.txt",
      `Favicons generated by FreeTools\nSizes: ${SIZES.join(", ")}\nAdd <link rel="icon" sizes="any" href="/favicon-32x32.png"> etc to your HTML.`,
    )

    const out = await zip.generateAsync({ type: "blob" })
    const url = URL.createObjectURL(out)
    const a = document.createElement("a")
    a.href = url
    a.download = "freetools-favicons.zip"
    a.click()
    setTimeout(() => URL.revokeObjectURL(url), 500)
  }

  return (
    <Card>
      <CardContent className="space-y-6 p-6">
        <div className="space-y-2">
          <Label htmlFor="file">Logo/Image (square works best)</Label>
          <Input id="file" type="file" accept="image/*" onChange={(e) => setFile(e.target.files?.[0] || null)} />
        </div>
        <Button onClick={generate}>Generate Zip</Button>
      </CardContent>
    </Card>
  )
}

function loadImage(file: File): Promise<HTMLImageElement> {
  return new Promise((resolve, reject) => {
    const img = new Image()
    img.crossOrigin = "anonymous"
    img.src = URL.createObjectURL(file)
    img.onload = () => resolve(img)
    img.onerror = reject
  })
}
